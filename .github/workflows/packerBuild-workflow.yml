name: Validate the Packer AMI Template

env:
  AWS_REGION: us-east-1

on:
  push:
    branches: [main]

jobs:
  packer_init_validate_build:
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the  files
        run: |
          zip -r webapplication.zip ./
          pwd
      
      - name: check the current
        run: ls -la

      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ."
        
      - name: Run `packer validate`
        id: validate
        run: "packer validate ."

      - name: Build Artifact
        run: |
          packer build -color=false -on-error=abort .
          ami_id=$(cat manifest.json | grep -o '"artifact_id": "[^"]*' | cut -d'"' -f4 | cut -d':' -f2)
          echo $ami_id
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
            
      - name: Set AMI ID as a variable
        run: echo "ami_id=${{ env.AMI_ID }}"
   
      - name: Create New Version of Launch Template
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws ec2 create-launch-template-version \
          --launch-template-id ${{ vars.LAUNCH_TEMPLATE_ID }} \
          --version-description "New version with AMI ${{ env.AMI_ID }}" \
          --region us-east-1 \
          --source-version 1 \
          --launch-template-data '{"ImageId": "${{ env.AMI_ID }}" }'
   
      - name: Apply Launch Template Refresh
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
   
   
          refresh_response=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{vars.AUTO_SCALE_GROUP_ID}} \
          --desired-configuration '{"LaunchTemplate" : { "LaunchTemplateId":"${{ vars.LAUNCH_TEMPLATE_ID }}", "Version":"$Latest" }}' \
          --region us-east-1 \
          --query 'InstanceRefreshId' \
          --output text)
   
          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{vars.AUTO_SCALE_GROUP_ID}} \
              --instance-refresh-ids $refresh_response \
              --region us-east-1 \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
        
            if [ "$refresh_status" == "Pending" ] || [ "$refresh_status" == "InProgress" ]; then
              echo "Instance refresh is still in progress. Waiting..."
              sleep 60  # Wait for 60 seconds before checking again
            elif [ "$refresh_status" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              break  # Exit the loop when refresh is successful
            else
              echo "Error: Instance refresh failed or encountered an unexpected status: $refresh_status"
              exit 1  # Exit with an error if refresh fails or has unexpected status
            fi
          done
   